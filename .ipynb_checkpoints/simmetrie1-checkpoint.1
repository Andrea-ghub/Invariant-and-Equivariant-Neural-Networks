{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9b741526",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from tensorflow.keras.datasets import mnist\n",
    "from matplotlib import pyplot as plt\n",
    "from torchvision.transforms.functional import rotate\n",
    "from scipy.linalg import lstsq, null_space\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "442116b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rot_mat(d): # questa è G\n",
    "    mat = np.zeros(d**4).reshape(d**2,d**2)\n",
    "    for j in range(d):\n",
    "        for i in range(d):\n",
    "            k = (i+1)*d-j\n",
    "            h = i+(j)*d+1\n",
    "#             print(h,k)\n",
    "            mat[h-1][k-1] = 1\n",
    "    return mat\n",
    "\n",
    "def id_minus(mat): # questa è I - G\n",
    "    d = len(mat)\n",
    "    iden = np.identity(d)\n",
    "    \n",
    "    return (iden - mat)\n",
    "\n",
    "def mat_sum(mat,s_d = 4):\n",
    "    n = len(mat)\n",
    "    out = np.zeros(n**2).reshape(n,n)\n",
    "    for j in range(s_d):\n",
    "        out = out + np.linalg.matrix_power(mat, j)\n",
    "    return out\n",
    "\n",
    "def W(output_dim, d = 4):\n",
    "    kernel = null_space(id_minus(rot_mat(d)).T).T\n",
    "    W = []\n",
    "    for j in range(output_dim):\n",
    "        vec = np.zeros(d**2)\n",
    "        for k in kernel:\n",
    "            vec = np.random.random()*k + vec\n",
    "        W.append(list(vec))\n",
    "    W = np.array(W)/len(kernel)\n",
    "    return np.array(W)\n",
    "\n",
    "def W_old(output_dim, mat, s_d=4):\n",
    "    n = len(mat)\n",
    "    positions = mat_sum(mat,s_d = 4)\n",
    "    \n",
    "    W = []\n",
    "    for k in range(output_dim):\n",
    "        vec = np.zeros(n)\n",
    "        for j in positions[0:n//2+1]:\n",
    "            vec = j*np.random.random()/(n/2) + vec\n",
    "        W.append(list(vec))\n",
    "        \n",
    "    return np.array(W)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4a876033",
   "metadata": {},
   "outputs": [],
   "source": [
    "def project_grad(loss, rotated_loss, model):\n",
    "    \n",
    "    optimizer.zero_grad()  \n",
    "    loss.backward(retain_graph=True)  \n",
    "\n",
    "    grads1 = {name: param.grad.clone() for name, param in model.named_parameters()}\n",
    "\n",
    "    optimizer.zero_grad()\n",
    "    rotated_loss.backward(retain_graph=True)\n",
    "    grads2 = {name: param.grad.clone() for name, param in model.named_parameters()}\n",
    "\n",
    "    scalars = []\n",
    "    norms = []\n",
    "    with torch.no_grad():\n",
    "        for name, param in model.named_parameters():\n",
    "            if param.grad is not None:\n",
    "                scalars.append(torch.dot(torch.flatten(grads1[name]), torch.flatten(grads2[name])))\n",
    "                norms.append(torch.norm(grads2[name]**2))\n",
    "\n",
    "    scalar = torch.sum(torch.Tensor(scalars))\n",
    "    norm = torch.sum(torch.Tensor(norms))\n",
    "    proj = scalar/norm\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for name, param in model.named_parameters():\n",
    "            if param.grad is not None:\n",
    "                param.grad = grads1[name] - proj*grads2[name]\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d0a4538",
   "metadata": {},
   "source": [
    "## Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bb4c9c13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train: X=(60000, 28, 28), y=(60000,)\n",
      "Test: X=(10000, 28, 28), y=(10000,)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# load dataset\n",
    "(trainX, trainy), (testX, testy) = mnist.load_data()\n",
    "# summarize loaded dataset\n",
    "print('Train: X=%s, y=%s' % (trainX.shape, trainy.shape))\n",
    "print('Test: X=%s, y=%s' % (testX.shape, testy.shape))\n",
    "# plot first few images\n",
    "for i in range(9):\n",
    "    # define subplot\n",
    "    plt.subplot(330 + 1 + i)\n",
    "    # plot raw pixel data\n",
    "    plt.imshow(trainX[i], cmap=plt.get_cmap('gray'))\n",
    "# show the figure\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e555c38",
   "metadata": {},
   "source": [
    "## Define NN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "1f1d275c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using cuda device\n"
     ]
    }
   ],
   "source": [
    "from torch import nn\n",
    "\n",
    "# Get cpu or gpu device for training.\n",
    "device = \"cuda\"\n",
    "print(f\"Using {device} device\")\n",
    "\n",
    "class InvariantNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(InvariantNN, self).__init__()\n",
    "        \n",
    "        self.softmax = nn.Softmax()\n",
    "        \n",
    "        self.flatten = nn.Flatten(start_dim=1)\n",
    "        self.l1 = nn.Linear(28*28, 64)\n",
    "        self.l2 = nn.Linear(64, 64)\n",
    "        self.l3 = nn.Linear(64, 10)\n",
    "        self.relu = nn.ReLU()\n",
    "        \n",
    "        self.loss = nn.CrossEntropyLoss()\n",
    "        \n",
    "    def default_gradient(self, x0, target):\n",
    "        optimizer.zero_grad()\n",
    "        loss = self.loss(self.forward(x0), target)\n",
    "        loss.backward(retain_graph=True)  \n",
    "        grads1 = {name: param.grad.clone() for name, param in self.named_parameters()}\n",
    "        flatten_gradient1 = torch.concatenate([grad.flatten() for grad in grads1.values()])\n",
    "        return grads1, flatten_gradient1\n",
    "    \n",
    "    def invariance_gradient(self, x0, x0_r, target):\n",
    "        optimizer.zero_grad()\n",
    "        invariance_loss = self.loss(self.forward(x0), target) - self.loss(self.forward(x0_r), target)\n",
    "        invariance_loss.backward(retain_graph=True)\n",
    "        grads2 = {name: param.grad.clone() for name, param in self.named_parameters()}\n",
    "        flatten_gradient2 = torch.concatenate([grad.flatten() for grad in grads2.values()])\n",
    "        return grads2, flatten_gradient2\n",
    "\n",
    "    def project_gradient(self, scalar, norm, grads1, grads2):\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            for name, param in self.named_parameters():\n",
    "                if param.grad is not None:\n",
    "                    param.grad = grads1[name] - (scalar/(norm**2))*grads2[name]\n",
    "        return {name: param.grad.clone() for name, param in self.named_parameters()}\n",
    "\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.flatten(x)\n",
    "        x = self.l1(x)\n",
    "        x = self.relu(x)\n",
    "        x = self.l2(x)    \n",
    "        x = self.relu(x)\n",
    "        x = self.l3(x)\n",
    "        x = self.relu(x)\n",
    "#         x = self.softmax(x)\n",
    "        return  x\n",
    "    \n",
    "    \n",
    "# print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "7e40dea9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(17.4252)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.norm(projected_gradient_flat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "257bd8fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(-1.4301e-06)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.dot(projected_gradient_flat, flat_grad2)/(torch.norm(projected_gradient_flat)* torch.norm(flat_grad2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02f6e570",
   "metadata": {},
   "source": [
    "## Gradient projection train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "f600514e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "########### 0 ############\n",
      "Accuracy:  0.12\n",
      "Invariance:  1.0\n",
      "Loss:  2.3490176\n",
      "Invariance_loss:  0.0\n",
      "########### 100 ############\n",
      "Accuracy:  0.23\n",
      "Invariance:  0.79\n",
      "Loss:  2.234702\n",
      "Invariance_loss:  9.775162e-06\n",
      "########### 200 ############\n",
      "Accuracy:  0.34\n",
      "Invariance:  0.64\n",
      "Loss:  2.134665\n",
      "Invariance_loss:  3.194809e-05\n",
      "########### 300 ############\n",
      "Accuracy:  0.46\n",
      "Invariance:  0.53\n",
      "Loss:  2.0085297\n",
      "Invariance_loss:  -5.555153e-05\n",
      "########### 400 ############\n",
      "Accuracy:  0.5\n",
      "Invariance:  0.5\n",
      "Loss:  1.8910233\n",
      "Invariance_loss:  -1.692772e-05\n"
     ]
    }
   ],
   "source": [
    "model = InvariantNN().to(device)\n",
    "model.l1.weight.data = torch.Tensor(W(64,d = 28)).to(device)\n",
    "optimizer = torch.optim.SGD(model.parameters(), lr=1e-5, momentum=0)\n",
    "\n",
    "x0 = torch.Tensor(trainX).to(device)\n",
    "y0 = torch.Tensor(trainy).to(device)\n",
    "\n",
    "rotated_data_90 = rotate(img = x0, angle = 90)\n",
    "rotated_data_180 = rotate(img = x0, angle = 180)\n",
    "rotated_data_270 = rotate(img = x0, angle = 270)\n",
    "loss_history = []\n",
    "accuracy = []\n",
    "invariance = []\n",
    "loss_r = []\n",
    "\n",
    "for i in range(500):\n",
    "    \n",
    "    pred1 = model(x0)\n",
    "    pred2 = model(rotated_data_90)\n",
    "    pred3 = model(rotated_data_180)\n",
    "    pred4 = model(rotated_data_270)\n",
    "    \n",
    "    _, arg1 = torch.max(pred1,1)\n",
    "    _, arg2 = torch.max(pred2,1)\n",
    "    _, arg3 = torch.max(pred3,1)\n",
    "    _, arg4 = torch.max(pred4,1)\n",
    "    \n",
    "    \n",
    "    acc = (arg1 == y0.long()).sum().item()/len(x0)\n",
    "    inv_1 = (arg1 == arg2).sum().item()/len(x0)\n",
    "    inv_2 = (arg1 == arg2).sum().item()/len(x0)\n",
    "    inv_3 = (arg1 == arg3).sum().item()/len(x0)\n",
    "    \n",
    "    inv = (inv_1 +inv_2 + inv_3)/3\n",
    "    \n",
    "    loss = l_acc*loss_CE(pred1, y0.long())\n",
    "    rotated_loss = loss_CE(pred2, y0.long()) - loss_CE(pred1, y0.long())\n",
    "    \n",
    "    if i%100 in np.arange(20):\n",
    "        optimizer.zero_grad()\n",
    "        inv_loss = 100*(loss_CE(pred2, y0.long()) - loss_CE(pred1, y0.long()))**2\n",
    "        inv_loss.backward()\n",
    "    else:\n",
    "        grads1, flat_grad1 = model.default_gradient(x0, y0.long())\n",
    "        grads2, flat_grad2 = model.invariance_gradient(x0, rotated_data_90, y0.long())\n",
    "\n",
    "        scalar = torch.dot(flat_grad1, flat_grad2)\n",
    "        norm = torch.norm(flat_grad2)\n",
    "\n",
    "        projected_gradient = model.project_gradient(scalar, norm, grads1, grads2)\n",
    "    \n",
    "    if (i%100 == 0):\n",
    "        print(\"###########\", i, \"############\")\n",
    "        print(\"Accuracy: \" , round(acc, 2))\n",
    "        print(\"Invariance: \", round(inv, 2))\n",
    "        print(\"Loss: \" , loss.cpu().detach().numpy())\n",
    "        print(\"Invariance_loss: \" , rotated_loss.cpu().detach().numpy())\n",
    "          \n",
    "    loss_history.append(loss.cpu().detach().numpy())\n",
    "    loss_r.append(rotated_loss.cpu().detach().numpy())\n",
    "    accuracy.append(acc)\n",
    "    invariance.append(inv)\n",
    "    \n",
    "    optimizer.step()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "e9f991c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(arg1.cpu(), y0.long().cpu())\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "4ccccde6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAg0AAAG2CAYAAAD8/bW/AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAA9hAAAPYQGoP6dpAABCU0lEQVR4nO3df1RVdb7/8deRn4pyRBCQQrSmCINGQweRZqybAzbij5l7Q4c65h3D8fpNrgX2Y5wmZ/JHTprWdDO1bpo5Ma3r2NhYiM5UK1JkQqlQrnbTAgxEE0FQfsjZ3z8cT52wOscNie7nY629luz93vt8NrOm8+b9/nz2thmGYQgAAOBb9LjYAwAAAJcGkgYAAOARkgYAAOARkgYAAOARkgYAAOARkgYAAOARkgYAAOARkgYAAOARkgYAAOARkgYAAOARkgYAALrI4cOHdeeddyo0NFS9evXS0KFDVVJS4hZTXl6uCRMmyG63q0+fPho5cqQqKipcx1taWjR79myFhYUpKChIEyZMUFVVlds16urq5HA4ZLfbZbfb5XA4dOLECbeYiooKjR8/XkFBQQoLC1N2drZaW1u9uh+SBgAAukBdXZ1SUlLk5+enN954Q/v27dOyZcvUt29fV8zHH3+sm266Sdddd53eeustvf/++3r44YcVGBjoipkzZ442bdqkvLw8FRYWqrGxUenp6Wpvb3fFZGZmqrS0VPn5+crPz1dpaakcDofreHt7u8aNG6empiYVFhYqLy9PGzduVE5Ojlf3ZOOFVQAAdL4HH3xQ7777rt55552vjZkyZYr8/Py0fv368x6vr69X//79tX79ek2ePFmS9Nlnnyk6Olqvv/660tLSVF5eriFDhqioqEhJSUmSpKKiIiUnJ+t///d/FRsbqzfeeEPp6emqrKxUVFSUJCkvL0/Tpk1TbW2tgoODPbonX29+Ad2N0+nUZ599pj59+shms13s4QAAvGQYhk6ePKmoqCj16NF1xe/m5mavS/HnYxhGh++bgIAABQQEdIjdvHmz0tLSdPvtt+vtt9/WFVdcoVmzZikrK0vS2e+wLVu26P7771daWpr27NmjwYMH66GHHtKkSZMkSSUlJWpra1NqaqrrulFRUYqPj9eOHTuUlpamnTt3ym63uxIGSRo5cqTsdrt27Nih2NhY7dy5U/Hx8a6EQZLS0tLU0tKikpIS3XLLLR7d/yWdNJzLtgAAl7bKykpdeeWVXXLt5uZmDY7prZra9m8P/ha9e/dWY2Oj275HHnlE8+fP7xB78OBBrVy5Uvfdd59+9atfqbi4WNnZ2QoICNDUqVNVW1urxsZGPfbYY1qwYIGWLFmi/Px8/exnP9Obb76p0aNHq6amRv7+/goJCXG7dkREhGpqaiRJNTU1Cg8P7/D54eHhbjERERFux0NCQuTv7++K8cQlnTT06dNHknTl/F+rx5f6PwCAS4OzuVlV8xe4/nveFVpbW1VT265PSwYpuM+FVzMaTjoVk/iJKisr3cr556sySGcrCcOHD9eiRYskScOGDdPevXu1cuVKTZ06VU6nU5I0ceJE3XvvvZKkoUOHaseOHXr22Wc1evTorx3LVyse56u2X0jMt7mkk4ZzN9ojMJCkAQAuYd9Fi7l3H5t697nwz3Hq7LnBwcEezQEYMGCAhgwZ4rYvLi5OGzdulCSFhYXJ19f3vDGFhYWSpMjISLW2tqqurs6t2lBbW6tRo0a5Yo4cOdLh848ePeqqLkRGRmrXrl1ux+vq6tTW1tahAvFNWD0BALCEdsNpevNGSkqK9u/f77bvwIEDiomJkST5+/trxIgR3xiTmJgoPz8/bdu2zXW8urpaZWVlrqQhOTlZ9fX1Ki4udsXs2rVL9fX1bjFlZWWqrq52xRQUFCggIECJiYke39MlXWkAAMBTThly6sIXDHp77r333qtRo0Zp0aJFysjIUHFxsVavXq3Vq1e7YubOnavJkyfrRz/6kW655Rbl5+frtdde01tvvSVJstvtmj59unJychQaGqp+/fopNzdXCQkJGjNmjKSzlYmxY8cqKytLq1atkiTNmDFD6enpio2NlSSlpqZqyJAhcjgcevzxx3X8+HHl5uYqKyvL45UTEpUGAAC6xIgRI7Rp0ya9/PLLio+P16OPPqoVK1bojjvucMX89Kc/1bPPPqvf//73SkhI0HPPPaeNGzfqpptucsUsX75ckyZNUkZGhlJSUtSrVy+99tpr8vHxccVs2LBBCQkJSk1NVWpqqm644Qa3ZZw+Pj7asmWLAgMDlZKSooyMDE2aNElLly716p4u6ec0NDQ0yG63a+BjC5jTAACXIGdzsyoe/LXq6+u9+ovXG+e+Kz7bf6XpiZBRsVVdOtbujvYEAMAS2g1D7Sb+TjZz7uWC9gQAAPAIlQYAgCV81xMhL0ckDQAAS3DKUDtJgym0JwAAgEeoNAAALIH2hHkkDQAAS2D1hHm0JwAAgEeoNAAALMH5z83M+VZH0gAAsIR2k6snzJx7uSBpAABYQrtxdjNzvtUxpwEAAHiESgMAwBKY02AeSQMAwBKcsqldNlPnWx3tCQAA4BEqDQAAS3AaZzcz51sdSQMAwBLaTbYnzJx7uaA9AQAAPEKlAQBgCVQazCNpAABYgtOwyWmYWD1h4tzLBe0JAADgESoNAABLoD1hHkkDAMAS2tVD7SYK7O2dOJZLFUkDAMASDJNzGgzmNDCnAQAAeIZKAwDAEpjTYB5JAwDAEtqNHmo3TMxp4DHStCcAAIBnqDQAACzBKZucJv5WdopSA0kDAMASmNNgHu0JAADgESoNAABLMD8RkvYESQMAwBLOzmkw8cIq2hO0JwAAgGeoNAAALMFp8t0TrJ4gaQAAWARzGswjaQAAWIJTPXhOg0nMaQAAAB6h0gAAsIR2w6Z2E6+3NnPu5YKkAQBgCe0mJ0K2056gPQEAADxDpQEAYAlOo4ecJlZPOFk9QdIAALAG2hPm0Z4AAAAeodIAALAEp8ytgHB23lAuWSQNAABLMP9wJ4rz/AYAAIBHqDQAACzB/Lsn+DubpAEAYAlO2eSUmTkNPBGSpAEAYAlUGszjNwAAADxC0gAAsIRzD3cys3nr8OHDuvPOOxUaGqpevXpp6NChKikpOW/sL3/5S9lsNq1YscJtf0tLi2bPnq2wsDAFBQVpwoQJqqqqcoupq6uTw+GQ3W6X3W6Xw+HQiRMn3GIqKio0fvx4BQUFKSwsTNnZ2WptbfXqfkgaAACW4DRspjdv1NXVKSUlRX5+fnrjjTe0b98+LVu2TH379u0Q++qrr2rXrl2KiorqcGzOnDnatGmT8vLyVFhYqMbGRqWnp6u9vd0Vk5mZqdLSUuXn5ys/P1+lpaVyOByu4+3t7Ro3bpyamppUWFiovLw8bdy4UTk5OV7dE3MaAADoAkuWLFF0dLReeOEF175BgwZ1iDt8+LDuuecebd26VePGjXM7Vl9fr+eff17r16/XmDFjJEkvvfSSoqOjtX37dqWlpam8vFz5+fkqKipSUlKSJGnNmjVKTk7W/v37FRsbq4KCAu3bt0+VlZWuxGTZsmWaNm2aFi5cqODgYI/uiUoDAMASnCZbE+ce7tTQ0OC2tbS0nPfzNm/erOHDh+v2229XeHi4hg0bpjVr1riPyemUw+HQ3Llzdf3113e4RklJidra2pSamuraFxUVpfj4eO3YsUOStHPnTtntdlfCIEkjR46U3W53i4mPj3erZKSlpamlpeVr2yXnQ9IAALCEc2+5NLNJUnR0tGvugN1u1+LFi8/7eQcPHtTKlSt1zTXXaOvWrZo5c6ays7P14osvumKWLFkiX19fZWdnn/caNTU18vf3V0hIiNv+iIgI1dTUuGLCw8M7nBseHu4WExER4XY8JCRE/v7+rhhP0J4AAMALlZWVbuX8gICA88Y5nU4NHz5cixYtkiQNGzZMe/fu1cqVKzV16lSVlJToySef1O7du2WzeTdfwjAMt3POd/6FxHwbKg0AAEtol830JknBwcFu29clDQMGDNCQIUPc9sXFxamiokKS9M4776i2tlYDBw6Ur6+vfH199emnnyonJ8c19yEyMlKtra2qq6tzu05tba2rchAZGakjR450+PyjR4+6xXy1olBXV6e2trYOFYhvQtIAALCEzmpPeColJUX79+9323fgwAHFxMRIkhwOhz744AOVlpa6tqioKM2dO1dbt26VJCUmJsrPz0/btm1zXaO6ulplZWUaNWqUJCk5OVn19fUqLi52xezatUv19fVuMWVlZaqurnbFFBQUKCAgQImJiR7fE+0JAAC6wL333qtRo0Zp0aJFysjIUHFxsVavXq3Vq1dLkkJDQxUaGup2jp+fnyIjIxUbGytJstvtmj59unJychQaGqp+/fopNzdXCQkJrtUUcXFxGjt2rLKysrRq1SpJ0owZM5Senu66TmpqqoYMGSKHw6HHH39cx48fV25urrKysjxeOSFRaQAAWES7zLYovDNixAht2rRJL7/8suLj4/Xoo49qxYoVuuOOO7y6zvLlyzVp0iRlZGQoJSVFvXr10muvvSYfHx9XzIYNG5SQkKDU1FSlpqbqhhtu0Pr1613HfXx8tGXLFgUGBiolJUUZGRmaNGmSli5d6tVYbIZhGF6d0Y00NDTIbrdr4GML1CMw8GIPBwDgJWdzsyoe/LXq6+u9+ovXG+e+K35dlKrA3n4XfJ3mxjYtGFnQpWPt7mhPAAAsgRdWmcdvAAAAeIRKAwDAEgzZ5JR3z0P46vlWR9IAALAE2hPm8RsAAAAeodIAALCEC3m99VfPtzqSBgCAJZx7W6WZ862O3wAAAPAIlQYAgCXQnjCPpAEAYAlO9ZDTRIHdzLmXC34DAADAI1QaAACW0G7Y1G6ixWDm3MsFSQMAwBKY02AeSQMAwBIMo4ecJp7qaPBESOY0AAAAz1BpAABYQrtsajfx0ikz514uSBoAAJbgNMzNS3AanTiYSxTtCQAA4BEqDQAAS3CanAhp5tzLBUkDAMASnLLJaWJegplzLxekTQAAwCNUGgAAlsATIc0jaQAAWAJzGszjNwAAADxCpQEAYAlOmXz3BBMhSRoAANZgmFw9YZA0kDQAAKyBt1yax5wGAADgESoNAABLYPWEeSQNAABLoD1hHmkTAADwCJUGAIAl8O4J80gaAACWQHvCPNoTAADAI1QaAACWQKXBPJIGAIAlkDSYR3sCAAB4hEoDAMASqDSYR9IAALAEQ+aWTRqdN5RLFkkDAMASqDSYx5wGAADgESoNAABLoNJgHkkDAMASSBrMoz0BAAA8QqUBAGAJVBrMI2kAAFiCYdhkmPjiN3Pu5YL2BAAA8AiVBgCAJThlM/VwJzPnXi5IGgAAlsCcBvNoTwAAAI+QNAAALOHcREgzm7cOHz6sO++8U6GhoerVq5eGDh2qkpISSVJbW5seeOABJSQkKCgoSFFRUZo6dao+++wzt2u0tLRo9uzZCgsLU1BQkCZMmKCqqiq3mLq6OjkcDtntdtntdjkcDp04ccItpqKiQuPHj1dQUJDCwsKUnZ2t1tZWr+6HpAEAYAnn2hNmNm/U1dUpJSVFfn5+euONN7Rv3z4tW7ZMffv2lSSdOnVKu3fv1sMPP6zdu3frz3/+sw4cOKAJEya4XWfOnDnatGmT8vLyVFhYqMbGRqWnp6u9vd0Vk5mZqdLSUuXn5ys/P1+lpaVyOByu4+3t7Ro3bpyamppUWFiovLw8bdy4UTk5OV7dE3MaAACW8F0vuVyyZImio6P1wgsvuPYNGjTI9W+73a5t27a5nfOHP/xBP/jBD1RRUaGBAweqvr5ezz//vNavX68xY8ZIkl566SVFR0dr+/btSktLU3l5ufLz81VUVKSkpCRJ0po1a5ScnKz9+/crNjZWBQUF2rdvnyorKxUVFSVJWrZsmaZNm6aFCxcqODjYo3ui0gAAgBcaGhrctpaWlvPGbd68WcOHD9ftt9+u8PBwDRs2TGvWrPnGa9fX18tms7mqESUlJWpra1NqaqorJioqSvHx8dqxY4ckaefOnbLb7a6EQZJGjhwpu93uFhMfH+9KGCQpLS1NLS0trnaJJ0gaAACWYJhsTZyrNERHR7vmDtjtdi1evPi8n3fw4EGtXLlS11xzjbZu3aqZM2cqOztbL7744nnjm5ub9eCDDyozM9P1l39NTY38/f0VEhLiFhsREaGamhpXTHh4eIfrhYeHu8VERES4HQ8JCZG/v78rxhO0JwAAlmBIMgxz50tSZWWlWzk/ICDgvPFOp1PDhw/XokWLJEnDhg3T3r17tXLlSk2dOtUttq2tTVOmTJHT6dQzzzzz7WMxDNlsX7RLvvxvMzHfhkoDAABeCA4Odtu+LmkYMGCAhgwZ4rYvLi5OFRUVbvva2tqUkZGhQ4cOadu2bW4JSWRkpFpbW1VXV+d2Tm1tratyEBkZqSNHjnT4/KNHj7rFfLWiUFdXp7a2tg4ViG9C0gAAsIRzT4Q0s3kjJSVF+/fvd9t34MABxcTEuH4+lzB89NFH2r59u0JDQ93iExMT5efn5zZhsrq6WmVlZRo1apQkKTk5WfX19SouLnbF7Nq1S/X19W4xZWVlqq6udsUUFBQoICBAiYmJHt8T7QkAgCV816sn7r33Xo0aNUqLFi1SRkaGiouLtXr1aq1evVqSdObMGf3bv/2bdu/erb/+9a9qb293VQP69esnf39/2e12TZ8+XTk5OQoNDVW/fv2Um5urhIQE12qKuLg4jR07VllZWVq1apUkacaMGUpPT1dsbKwkKTU1VUOGDJHD4dDjjz+u48ePKzc3V1lZWR6vnJCoNAAA0CVGjBihTZs26eWXX1Z8fLweffRRrVixQnfccYckqaqqSps3b1ZVVZWGDh2qAQMGuLZzqx4kafny5Zo0aZIyMjKUkpKiXr166bXXXpOPj48rZsOGDUpISFBqaqpSU1N1ww03aP369a7jPj4+2rJliwIDA5WSkqKMjAxNmjRJS5cu9eqebIZhZlrIxdXQ0CC73a6Bjy1Qj8DAiz0cAICXnM3Nqnjw16qvr/fqL15vnPuuiH9lrnx6nX/+gSfaT7WoLOPxLh1rd0d7AgBgCYZhcvXEJfsnduehPQEAADxCpQEAYAnf9UTIyxFJAwDAEkgazCNpAABYgtOwyWbii9/bt1xejpjTAAAAPEKlAQBgCayeMI+kAQBgCWeTBjNzGjpxMJco2hMAAMAjVBoAAJbA6gnzSBoAAJZg/HMzc77V0Z4AAAAeodIAALAE2hPmkTQAAKyB/oRpJA0AAGswWWkQlQbmNAAAAM9QaQAAWAJPhDSPpAEAYAlMhDSP9gQAAPAIlQYAgDUYNnOTGak0kDQAAKyBOQ3m0Z4AAAAeodIAALAGHu5kmkdJw1NPPeXxBbOzsy94MAAAdBVWT5jnUdKwfPlyjy5ms9lIGgAAuEx5lDQcOnSoq8cBAEDXo8VgygVPhGxtbdX+/ft15syZzhwPAABd4lx7wsxmdV4nDadOndL06dPVq1cvXX/99aqoqJB0di7DY4891ukDBACgUxidsFmc10nDQw89pPfff19vvfWWAgMDXfvHjBmjP/3pT506OAAA0H14veTy1Vdf1Z/+9CeNHDlSNtsXpZohQ4bo448/7tTBAQDQeWz/3Mycb21eJw1Hjx5VeHh4h/1NTU1uSQQAAN0Kz2kwzev2xIgRI7RlyxbXz+cShTVr1ig5ObnzRgYAALoVrysNixcv1tixY7Vv3z6dOXNGTz75pPbu3audO3fq7bff7ooxAgBgHpUG07yuNIwaNUrvvvuuTp06pauvvloFBQWKiIjQzp07lZiY2BVjBADAvHNvuTSzWdwFvXsiISFB69at6+yxAACAbuyCkob29nZt2rRJ5eXlstlsiouL08SJE+Xry/uvAADdE6/GNs/rb/mysjJNnDhRNTU1io2NlSQdOHBA/fv31+bNm5WQkNDpgwQAwDTmNJjm9ZyGu+++W9dff72qqqq0e/du7d69W5WVlbrhhhs0Y8aMrhgjAADoBryuNLz//vt67733FBIS4toXEhKihQsXasSIEZ06OAAAOo3ZyYxMhPS+0hAbG6sjR4502F9bW6vvfe97nTIoAAA6m80wv1mdR5WGhoYG178XLVqk7OxszZ8/XyNHjpQkFRUV6Xe/+52WLFnSNaMEAMAs5jSY5lHS0LdvX7dHRBuGoYyMDNc+459TSsePH6/29vYuGCYAALjYPEoa3nzzza4eBwAAXYs5DaZ5lDSMHj26q8cBAEDXoj1h2gU/jenUqVOqqKhQa2ur2/4bbrjB9KAAAED3c0Gvxv73f/93vfHGG+c9zpwGAEC3RKXBNK+XXM6ZM0d1dXUqKipSz549lZ+fr3Xr1umaa67R5s2bu2KMAACYZ3TCZnFeVxr+/ve/6y9/+YtGjBihHj16KCYmRj/+8Y8VHBysxYsXa9y4cV0xTgAAcJF5XWloampSeHi4JKlfv346evSopLNvvty9e3fnjg4AgM7Cq7FN87rSEBsbq/3792vQoEEaOnSoVq1apUGDBunZZ5/VgAEDumKMwCXD50Srwv5aoV7lJ2Rrc6qtf6Bqp1yllujeXfaZQe9/rtA3quR3rFltYYH6/CfRarqh33ljQ7YfVuiWSp34UaSO/XRQl40J6I7MPtWRJ0JeQNIwZ84cVVdXS5IeeeQRpaWlacOGDfL399fatWs7e3zAJaPHqTO68qkynb7Grs9mXKf2Pr7yO9ai9p4X/sr4PsW1Ci4+qsP3XH/e44GfnFTkix/p+G3Rakzop94fHlfkuo9UlT1ELTF93GIDKhoVvLNWLVG9Lng8AKzN6/bEHXfcoWnTpkmShg0bpk8++UT/+Mc/VFlZqcmTJ3s9gGeeeUaDBw9WYGCgEhMT9c4773h9DaA7CPnbZzrTN0C1P79aLTG9daZfoE5fa9eZsMAvgs44Fbr5Uw2aX6KrHijWlcs/VM//q7/gz7S/Xa1T19pVN+YKtUX0VN2YK3Tq2mD1fbvGLc7W0q6Il/5PtRlXydnT54I/D7ikXYSJkIcPH9add96p0NBQ9erVS0OHDlVJSckXQzIMzZ8/X1FRUerZs6duvvlm7d271+0aLS0tmj17tsLCwhQUFKQJEyaoqqrKLaaurk4Oh0N2u112u10Oh0MnTpxwi6moqND48eMVFBSksLAwZWdnd3hswrfxOmn4ql69eunGG29UWFiY1+f+6U9/0pw5czRv3jzt2bNHP/zhD3XbbbepoqLC7LCA71zQ3jq1RAcpcu0BDXr4PUUv/UDBO91f7hbx8scKPHRSNY5rVDH3BjUODdWAVf8rv6OnL+gzAz9p1KnYvm77TsX2VeAnJ9329f+fQzoV11enY+0X9DkAvFdXV6eUlBT5+fnpjTfe0L59+7Rs2TL17dvXFfP73/9eTzzxhJ5++mn94x//UGRkpH784x/r5Mkv/j88Z84cbdq0SXl5eSosLFRjY6PS09PdHnGQmZmp0tJS5efnKz8/X6WlpXI4HK7j7e3tGjdunJqamlRYWKi8vDxt3LhROTk5Xt2TR3XT++67z+MLPvHEE17FTp8+XXfffbckacWKFdq6datWrlypxYsXe3wdoDvw/bxZwTuadeLmATo+5goFVjQqbNMnMnx76OSI/vI91qzeez7XJ4/cqHa7vyTpxC1R6lV+Qn2Kj+r4uIHef+bJNrX38XPb197HT74Nba6fe+8+poCqJlXdl2DuBoFLnE0m5zR4Gb9kyRJFR0frhRdecO0bNGiQ69+GYWjFihWaN2+efvazn0mS1q1bp4iICP3xj3/UL3/5S9XX1+v555/X+vXrNWbMGEnSSy+9pOjoaG3fvl1paWkqLy9Xfn6+ioqKlJSUJElas2aNkpOTtX//fsXGxqqgoED79u1TZWWloqKiJEnLli3TtGnTtHDhQgUHB3t0Tx4lDXv27PHoYl9+qdW3aW1tVUlJiR588EG3/ampqdqxY8d5z2lpaVFLS4vr5y+/fRO42GyG1Bwd5Pryb70ySP41p2V/94hOjuivgKom2QwpZlGp+3lnDLUHnf2/om9diwY+9v4XB52GbO2Grnqg2LXrZGKYjmZc9aULdBzLuUnevnUtCtv0qT6beZ0MP9OFRQDq+N0TEBCggICADnGbN29WWlqabr/9dr399tu64oorNGvWLGVlZUmSDh06pJqaGqWmprpda/To0dqxY4d++ctfqqSkRG1tbW4xUVFRio+P144dO5SWlqadO3fKbre7EgZJGjlypOx2u3bs2KHY2Fjt3LlT8fHxroRBktLS0tTS0qKSkhLdcsstHt37RXth1bFjx9Te3q6IiAi3/REREaqpqTnvOYsXL9Zvf/vbTh8L0BnOBPupNaKn277WiED1/uBzSZLNMGT0kCpzEqSvJNjOgB7/vIa/KnO/eBR70AfH1fuDz3Xkzmu+iA38Yk7CmT5+8vlSVUGSfL5UfQioapJvY5uin/jQddzmlAIPnpS9sEYfP54k9WAZGSyik15YFR0d7bb7kUce0fz58zuEHzx4UCtXrtR9992nX/3qVyouLlZ2drYCAgI0depU13fd+b4HP/30U0lSTU2N/P39FRIS0iHm3Pk1NTWuRyF8WXh4uFvMVz8nJCRE/v7+X/udez4XPq27k3y1OmEYxtdWLB566CG3VklDQ0OH//GAi6V5cB/51za77fOvbVZbyNm/QFquCJLNefZLvfnqrykF+tjU1v+LiZPtfXxl+PVw2+f2mYN6q9eBetXf/MVy5177T6h50NmVE6eusavifvf3wYS//LFaw3vqxK1RJAywlk56jHRlZaVbOf98VQZJcjqdGj58uBYtWiTp7OKBvXv3auXKlZo6daorzpvvwa+LOV/8hcR8m4tWrwwLC5OPj0+HDKe2trZDNnROQECAgoOD3TaguzgxeoACP21UyLbD8jvarN4lxxRcVKv6myIlSW3hPXUyMUwRf/xYQR8cl+/nzQqoaFTfvx1Wr311F/SZ9T8aoF77T6jv3w7L78jps9c60KATo89+phHoo9YBvdw2w7+HnEG+ah3A0kvgQnz1e+jrkoYBAwZoyJAhbvvi4uJck/0jI8/+//SbvgcjIyPV2tqqurq6b4w5csR90rV09l1RX4756ufU1dWpra3ta79zz+eiJQ3+/v5KTEzUtm3b3PZv27ZNo0aNukijAi5cy8Deqv7Fteq955iif/+++hVU6dikGDUmfrGy6MjPr9LJ4WEK+8uniln8vgY8t1+BnzbqTN/z/0fn2zQP7qMaxzUKLj6qgY9/oODio6q565oOz2gAoO98yWVKSor279/vtu/AgQOKiYmRJA0ePFiRkZFu34Otra16++23Xd+DiYmJ8vPzc4uprq5WWVmZKyY5OVn19fUqLv5i7tOuXbtUX1/vFlNWVuZ6zpIkFRQUKCAgQImJiR7f00VtT9x3331yOBwaPny4kpOTtXr1alVUVGjmzJkXc1jABTt1fYhOXR/y9QE+PXT8tmgdv82zttrJH4Tr5A869iq/rGloqJqGhno8xq97UBRwufuunwh57733atSoUVq0aJEyMjJUXFys1atXa/Xq1WevZ7Npzpw5WrRoka655hpdc801WrRokXr16qXMzExJkt1u1/Tp05WTk6PQ0FD169dPubm5SkhIcK2miIuL09ixY5WVlaVVq1ZJkmbMmKH09HTFxsZKOrvIYMiQIXI4HHr88cd1/Phx5ebmKisry6uq/UVNGiZPnqzPP/9cv/vd71RdXa34+Hi9/vrrriwMAIBL1YgRI7Rp0yY99NBD+t3vfqfBgwdrxYoVuuOOO1wx999/v06fPq1Zs2aprq5OSUlJKigoUJ8+X1QLly9fLl9fX2VkZOj06dO69dZbtXbtWvn4fDEpesOGDcrOznatspgwYYKefvpp13EfHx9t2bJFs2bNUkpKinr27KnMzEwtXbrUq3uyGYbhdd61fv16Pfvsszp06JB27typmJgYrVixQoMHD9bEiRO9vdwFa2hokN1u18DHFqhH4PknigEAui9nc7MqHvy16uvru2ye2rnvikELFpr6rnA2N+uTX8/r0rF2d17PaTi3fOQnP/mJTpw44XoiVd++fbVixYrOHh8AAJ3jIjxG+nLjddLwhz/8QWvWrNG8efPcSiPDhw/Xhx9++A1nAgCAS5nXcxoOHTqkYcOGddgfEBCgpqamThkUAACdjVdjm+d1pWHw4MEqLS3tsP+NN97osB4VAIBu49wTIc1sFud1pWHu3Ln6f//v/6m5uVmGYai4uFgvv/yyFi9erOeee64rxggAgHmd9ERIK/M6afj3f/93nTlzRvfff79OnTqlzMxMXXHFFXryySc1ZcqUrhgjAADoBi7oOQ1ZWVnKysrSsWPH5HQ6z/uiDAAAuhPmNJhn6uFOYWFh3x4EAEB3QHvCNK+ThsGDB3/jG7EOHjxoakAAAKB78jppmDNnjtvPbW1t2rNnj/Lz8zV37tzOGhcAAJ3LZHuCSsMFJA3/+Z//ed79//Vf/6X33nvP9IAAAOgStCdM67RXY992223auHFjZ10OAAB0M532lsv/+Z//Ub9+/TrrcgAAdC4qDaZ5nTQMGzbMbSKkYRiqqanR0aNH9cwzz3Tq4AAA6CwsuTTP66Rh0qRJbj/36NFD/fv3180336zrrruus8YFAAC6Ga+ShjNnzmjQoEFKS0tTZGRkV40JAAB0Q15NhPT19dV//Md/qKWlpavGAwBA1zA6YbM4r1dPJCUlac+ePV0xFgAAusy5OQ1mNqvzek7DrFmzlJOTo6qqKiUmJiooKMjt+A033NBpgwMAAN2Hx0nDL37xC61YsUKTJ0+WJGVnZ7uO2Ww2GYYhm82m9vb2zh8lAACdgWqBKR4nDevWrdNjjz2mQ4cOdeV4AADoGjynwTSPkwbDOPvbiomJ6bLBAACA7surOQ3f9HZLAAC6Mx7uZJ5XScO11177rYnD8ePHTQ0IAIAuQXvCNK+Sht/+9rey2+1dNRYAANCNeZU0TJkyReHh4V01FgAAugztCfM8ThqYzwAAuKTRnjDN4ydCnls9AQAArMnjSoPT6ezKcQAA0LWoNJjm9WOkAQC4FDGnwTySBgCANVBpMM3rt1wCAABrotIAALAGKg2mkTQAACyBOQ3m0Z4AAAAeodIAALAG2hOmkTQAACyB9oR5tCcAAIBHqDQAAKyB9oRpJA0AAGsgaTCN9gQAAPAIlQYAgCXY/rmZOd/qSBoAANZAe8I0kgYAgCWw5NI85jQAAACPUGkAAFgD7QnTSBoAANbBF78ptCcAAIBHqDQAACyBiZDmkTQAAKyBOQ2m0Z4AAKALzJ8/XzabzW2LjIx0HW9sbNQ999yjK6+8Uj179lRcXJxWrlzpdo2WlhbNnj1bYWFhCgoK0oQJE1RVVeUWU1dXJ4fDIbvdLrvdLofDoRMnTrjFVFRUaPz48QoKClJYWJiys7PV2trq9T2RNAAALOFce8LM5q3rr79e1dXVru3DDz90Hbv33nuVn5+vl156SeXl5br33ns1e/Zs/eUvf3HFzJkzR5s2bVJeXp4KCwvV2Nio9PR0tbe3u2IyMzNVWlqq/Px85efnq7S0VA6Hw3W8vb1d48aNU1NTkwoLC5WXl6eNGzcqJyfH6/uhPQEAsIaL0J7w9fV1qy582c6dO3XXXXfp5ptvliTNmDFDq1at0nvvvaeJEyeqvr5ezz//vNavX68xY8ZIkl566SVFR0dr+/btSktLU3l5ufLz81VUVKSkpCRJ0po1a5ScnKz9+/crNjZWBQUF2rdvnyorKxUVFSVJWrZsmaZNm6aFCxcqODjY4/uh0gAAQBf56KOPFBUVpcGDB2vKlCk6ePCg69hNN92kzZs36/DhwzIMQ2+++aYOHDigtLQ0SVJJSYna2tqUmprqOicqKkrx8fHasWOHpLOJh91udyUMkjRy5EjZ7Xa3mPj4eFfCIElpaWlqaWlRSUmJV/dDpQEAYAmdtXqioaHBbX9AQIACAgI6xCclJenFF1/UtddeqyNHjmjBggUaNWqU9u7dq9DQUD311FPKysrSlVdeKV9fX/Xo0UPPPfecbrrpJklSTU2N/P39FRIS4nbdiIgI1dTUuGLCw8M7fHZ4eLhbTEREhNvxkJAQ+fv7u2I8RaUBAGANRidskqKjo12TDu12uxYvXnzej7vtttv0r//6r0pISNCYMWO0ZcsWSdK6deskSU899ZSKioq0efNmlZSUaNmyZZo1a5a2b9/+zbdhGLLZvnjn5pf/bSbGE1QaAADW0ElzGiorK93mAZyvynA+QUFBSkhI0EcffaTTp0/rV7/6lTZt2qRx48ZJkm644QaVlpZq6dKlGjNmjCIjI9Xa2qq6ujq3akNtba1GjRolSYqMjNSRI0c6fNbRo0dd1YXIyEjt2rXL7XhdXZ3a2to6VCC+DZUGAAC8EBwc7LZ5mjS0tLSovLxcAwYMUFtbm9ra2tSjh/vXsI+Pj5xOpyQpMTFRfn5+2rZtm+t4dXW1ysrKXElDcnKy6uvrVVxc7IrZtWuX6uvr3WLKyspUXV3tiikoKFBAQIASExO9uncqDQAAS/iunwiZm5ur8ePHa+DAgaqtrdWCBQvU0NCgu+66S8HBwRo9erTmzp2rnj17KiYmRm+//bZefPFFPfHEE5Iku92u6dOnKycnR6GhoerXr59yc3Nd7Q5JiouL09ixY5WVlaVVq1ZJOrsKIz09XbGxsZKk1NRUDRkyRA6HQ48//riOHz+u3NxcZWVlebVyQiJpAABYxXe85LKqqko///nPdezYMfXv318jR45UUVGRYmJiJEl5eXl66KGHdMcdd+j48eOKiYnRwoULNXPmTNc1li9fLl9fX2VkZOj06dO69dZbtXbtWvn4+LhiNmzYoOzsbNcqiwkTJujpp592Hffx8dGWLVs0a9YspaSkqGfPnsrMzNTSpUu9/hXYDMO4ZB+M2dDQILvdroGPLVCPwMCLPRwAgJeczc2qePDXqq+v9/qvXk+d+674/tRF8vG/8O+K9tZmvf/ir7p0rN0dlQYAgCXYDEM2E38nmzn3ckHSAACwBl5YZRqrJwAAgEeoNAAALOG7Xj1xOSJpAABYA+0J02hPAAAAj1BpAABYAu0J80gaAADWQHvCNJIGAIAlUGkwjzkNAADAI1QaAADWQHvCNJIGAIBl0GIwh/YEAADwCJUGAIA1GMbZzcz5FkfSAACwBFZPmEd7AgAAeIRKAwDAGlg9YRpJAwDAEmzOs5uZ862O9gQAAPAIlQYAgDXQnjCNpAEAYAmsnjCPpAEAYA08p8E05jQAAACPUGkAAFgC7QnzSBoAANbAREjTaE8AAACPUGkAAFgC7QnzSBoAANbA6gnTaE8AAACPUGkAAFgC7QnzSBoAANbA6gnTaE8AAACPUGkAAFgC7QnzSBoAANbgNM5uZs63OJIGAIA1MKfBNOY0AAAAj1BpAABYgk0m5zR02kguXSQNAABr4ImQptGeAAAAHqHSAACwBJZcmkfSAACwBlZPmEZ7AgAAeIRKAwDAEmyGIZuJyYxmzr1ckDQAAKzB+c/NzPkWR3sCAAB4hEoDAMASaE+YR9IAALAGVk+YRtIAALAGnghpGnMaAACAR6g0AAAsgSdCmkfSAACwBtoTptGeAACgC8yfP182m81ti4yMdIspLy/XhAkTZLfb1adPH40cOVIVFRWu4y0tLZo9e7bCwsIUFBSkCRMmqKqqyu0adXV1cjgcstvtstvtcjgcOnHihFtMRUWFxo8fr6CgIIWFhSk7O1utra1e3xNJAwDAEmxO85u3rr/+elVXV7u2Dz/80HXs448/1k033aTrrrtOb731lt5//309/PDDCgwMdMXMmTNHmzZtUl5engoLC9XY2Kj09HS1t7e7YjIzM1VaWqr8/Hzl5+ertLRUDofDdby9vV3jxo1TU1OTCgsLlZeXp40bNyonJ8fr+6E9AQCwhovQnvD19e1QXThn3rx5+slPfqLf//73rn1XXXWV69/19fV6/vnntX79eo0ZM0aS9NJLLyk6Olrbt29XWlqaysvLlZ+fr6KiIiUlJUmS1qxZo+TkZO3fv1+xsbEqKCjQvn37VFlZqaioKEnSsmXLNG3aNC1cuFDBwcEe3w+VBgAAvNDQ0OC2tbS0fG3sRx99pKioKA0ePFhTpkzRwYMHJUlOp1NbtmzRtddeq7S0NIWHhyspKUmvvvqq69ySkhK1tbUpNTXVtS8qKkrx8fHasWOHJGnnzp2y2+2uhEGSRo4cKbvd7hYTHx/vShgkKS0tTS0tLSopKfHq3kkaAADWYHTCJik6Oto1f8But2vx4sXn/bikpCS9+OKL2rp1q9asWaOamhqNGjVKn3/+uWpra9XY2KjHHntMY8eOVUFBgX7605/qZz/7md5++21JUk1Njfz9/RUSEuJ23YiICNXU1LhiwsPDO3x2eHi4W0xERITb8ZCQEPn7+7tiPEV7AgBgCZ31GOnKykq3kn5AQMB542+77TbXvxMSEpScnKyrr75a69at05QpUyRJEydO1L333itJGjp0qHbs2KFnn31Wo0eP/tpxGIYhm832xbi+9G8zMZ6g0gAAgBeCg4Pdtq9LGr4qKChICQkJ+uijjxQWFiZfX18NGTLELSYuLs61eiIyMlKtra2qq6tzi6mtrXVVDiIjI3XkyJEOn3X06FG3mK9WFOrq6tTW1tahAvFtSBoAANZwbiKkmc2ElpYWlZeXa8CAAfL399eIESO0f/9+t5gDBw4oJiZGkpSYmCg/Pz9t27bNdby6ulplZWUaNWqUJCk5OVn19fUqLi52xezatUv19fVuMWVlZaqurnbFFBQUKCAgQImJiV7dA+0JAIA1GJIuYNmk2/leyM3N1fjx4zVw4EDV1tZqwYIFamho0F133SVJmjt3riZPnqwf/ehHuuWWW5Sfn6/XXntNb731liTJbrdr+vTpysnJUWhoqPr166fc3FwlJCS4VlPExcVp7NixysrK0qpVqyRJM2bMUHp6umJjYyVJqampGjJkiBwOhx5//HEdP35cubm5ysrK8mrlhETSAACwiO/61dhVVVX6+c9/rmPHjql///4aOXKkioqKXJWEn/70p3r22We1ePFiZWdnKzY2Vhs3btRNN93kusby5cvl6+urjIwMnT59WrfeeqvWrl0rHx8fV8yGDRuUnZ3tWmUxYcIEPf30067jPj4+2rJli2bNmqWUlBT17NlTmZmZWrp06YX8Di7d52I2NDTIbrdr4GML1ONLD8MAAFwanM3Nqnjw16qvr/f6r15Pnfuu+JdhD8rX58K/K860N+vvex7r0rF2d1QaAADWYMjkw506bSSXLJIGAIA18MIq01g9AQAAPEKlAQBgDU5J3j3LqOP5FkfSAACwhO969cTliPYEAADwCJUGAIA1MBHSNJIGAIA1kDSYRnsCAAB4hEoDAMAaqDSYRtIAALAGllyaRtIAALAEllyax5wGAADgESoNAABrYE6DaSQNAABrcBqSzcQXv5OkgfYEAADwCJUGAIA10J4wjaQBAGARJpMGkTTQngAAAB6h0gAAsAbaE6aRNAAArMFpyFSLgdUTtCcAAIBnqDQAAKzBcJ7dzJxvcSQNAABrYE6DaSQNAABrYE6DacxpAAAAHqHSAACwBtoTppE0AACswZDJpKHTRnLJoj0BAAA8QqUBAGANtCdMI2kAAFiD0ynJxLMWnDyngfYEAADwCJUGAIA10J4wjaQBAGANJA2m0Z4AAAAeodIAALAGHiNtGkkDAMASDMMpw8SbKs2ce7kgaQAAWINhmKsWMKeBOQ0AAMAzVBoAANZgmJzTQKWBpAEAYBFOp2QzMS+BOQ20JwAAgGeoNAAArIH2hGkkDQAASzCcThkm2hMsuaQ9AQAAPESlAQBgDbQnTCNpAABYg9OQbCQNZtCeAAAAHqHSAACwBsOQZOY5DVQaSBoAAJZgOA0ZJtoTBkkDSQMAwCIMp8xVGlhyyZwGAAC6wPz582Wz2dy2yMjI88b+8pe/lM1m04oVK9z2t7S0aPbs2QoLC1NQUJAmTJigqqoqt5i6ujo5HA7Z7XbZ7XY5HA6dOHHCLaaiokLjx49XUFCQwsLClJ2drdbWVq/viaQBAGAJhtMwvXnr+uuvV3V1tWv78MMPO8S8+uqr2rVrl6KiojocmzNnjjZt2qS8vDwVFhaqsbFR6enpam9vd8VkZmaqtLRU+fn5ys/PV2lpqRwOh+t4e3u7xo0bp6amJhUWFiovL08bN25UTk6O1/dDewIAYA0XoT3h6+v7tdUFSTp8+LDuuecebd26VePGjXM7Vl9fr+eff17r16/XmDFjJEkvvfSSoqOjtX37dqWlpam8vFz5+fkqKipSUlKSJGnNmjVKTk7W/v37FRsbq4KCAu3bt0+VlZWuxGTZsmWaNm2aFi5cqODgYM/vx9tfQHdyblKKs7n5Io8EAHAhzv33+7uYZHhGbaae7XRGbZKkhoYGt/0BAQEKCAg47zkfffSRoqKiFBAQoKSkJC1atEhXXXWVJMnpdMrhcGju3Lm6/vrrO5xbUlKitrY2paamuvZFRUUpPj5eO3bsUFpamnbu3Cm73e5KGCRp5MiRstvt2rFjh2JjY7Vz507Fx8e7VTLS0tLU0tKikpIS3XLLLR7/Di7ppOHkyZOSpKr5Cy7ySAAAZpw8eVJ2u71Lru3v76/IyEgV1rxu+lq9e/dWdHS0275HHnlE8+fP7xCblJSkF198Uddee62OHDmiBQsWaNSoUdq7d69CQ0O1ZMkS+fr6Kjs7+7yfVVNTI39/f4WEhLjtj4iIUE1NjSsmPDy8w7nh4eFuMREREW7HQ0JC5O/v74rx1CWdNERFRamyslJ9+vSRzWa72MMBOl1DQ4Oio6NVWVnpVQkRuFQYhqGTJ0+et5/fWQIDA3Xo0KELmvj3VYZhdPi++boqw2233eb6d0JCgpKTk3X11Vdr3bp1Gj16tJ588knt3r3b6++vr47hfOdfSIwnLumkoUePHrryyisv9jCALhccHEzSgMtWV1UYviwwMFCBgYFd/jnfJCgoSAkJCfroo4/Uo0cP1dbWauDAga7j7e3tysnJ0YoVK/TJJ58oMjJSra2tqqurc6s21NbWatSoUZKkyMhIHTlypMNnHT161FVdiIyM1K5du9yO19XVqa2trUMF4tuwegIAgO9AS0uLysvLNWDAADkcDn3wwQcqLS11bVFRUZo7d662bt0qSUpMTJSfn5+2bdvmukZ1dbXKyspcSUNycrLq6+tVXFzsitm1a5fq6+vdYsrKylRdXe2KKSgoUEBAgBITE726h0u60gAAQHeVm5ur8ePHa+DAgaqtrdWCBQvU0NCgu+66S6GhoQoNDXWL9/PzU2RkpGJjYyWdrcBMnz5dOTk5Cg0NVb9+/ZSbm6uEhATXaoq4uDiNHTtWWVlZWrVqlSRpxowZSk9Pd10nNTVVQ4YMkcPh0OOPP67jx48rNzdXWVlZXlcwSRqAbiwgIECPPPLI1/ZMAXRfVVVV+vnPf65jx46pf//+GjlypIqKihQTE+PxNZYvXy5fX19lZGTo9OnTuvXWW7V27Vr5+Pi4YjZs2KDs7GzXKosJEybo6aefdh338fHRli1bNGvWLKWkpKhnz57KzMzU0qVLvb4nm8HDtAEAgAeY0wAAADxC0gAAADxC0gAAADxC0gAAADxC0gB0U88884wGDx6swMBAJSYm6p133rnYQwJgcSQNQDf0pz/9SXPmzNG8efO0Z88e/fCHP9Rtt92mioqKiz00ABbGkkugG0pKStKNN96olStXuvbFxcVp0qRJWrx48UUcGQAro9IAdDOtra0qKSlxex2udPapbjt27LhIowIAkgag2zl27Jja29s7vEjmy6/DBYCLgaQB6Ka++sraC3mNLQB0JpIGoJsJCwuTj49Ph6pCbW2t16+xBYDORNIAdDP+/v5KTEx0ex2uJG3bts31qlsAuBh4yyXQDd13331yOBwaPny4kpOTtXr1alVUVGjmzJkXe2gALIykAeiGJk+erM8//1y/+93vVF1drfj4eL3++utevVIXADobz2kAAAAeYU4DAADwCEkDAADwCEkDAADwCEkDAADwCEkDAADwCEkDAADwCEkDAADwCEkDYNL8+fM1dOhQ18/Tpk3TpEmTvvNxfPLJJ7LZbCotLf3amEGDBmnFihUeX3Pt2rXq27ev6bHZbDa9+uqrpq8D4OIiacBladq0abLZbLLZbPLz89NVV12l3NxcNTU1dflnP/nkk1q7dq1HsZ580QNAd8FjpHHZGjt2rF544QW1tbXpnXfe0d13362mpiatXLmyQ2xbW5v8/Pw65XPtdnunXAcAuhsqDbhsBQQEKDIyUtHR0crMzNQdd9zhKpGfayn893//t6666ioFBATIMAzV19drxowZCg8PV3BwsP7lX/5F77//vtt1H3vsMUVERKhPnz6aPn26mpub3Y5/tT3hdDq1ZMkSfe9731NAQIAGDhyohQsXSpIGDx4sSRo2bJhsNptuvvlm13kvvPCC4uLiFBgYqOuuu07PPPOM2+cUFxdr2LBhCgwM1PDhw7Vnzx6vf0dPPPGEEhISFBQUpOjoaM2aNUuNjY0d4l599VVde+21CgwM1I9//GNVVla6HX/ttdeUmJiowMBAXXXVVfrtb3+rM2fOeD0eAN0bSQMso2fPnmpra3P9/H//93965ZVXtHHjRld7YNy4caqpqdHrr7+ukpIS3Xjjjbr11lt1/PhxSdIrr7yiRx55RAsXLtR7772nAQMGdPgy/6qHHnpIS5Ys0cMPP6x9+/bpj3/8oyIiIiSd/eKXpO3bt6u6ulp//vOfJUlr1qzRvHnztHDhQpWXl2vRokV6+OGHtW7dOklSU1OT0tPTFRsbq5KSEs2fP1+5uble/0569Oihp556SmVlZVq3bp3+/ve/6/7773eLOXXqlBYuXKh169bp3XffVUNDg6ZMmeI6vnXrVt15553Kzs7Wvn37tGrVKq1du9aVGAG4jBjAZeiuu+4yJk6c6Pp5165dRmhoqJGRkWEYhmE88sgjhp+fn1FbW+uK+dvf/mYEBwcbzc3Nbte6+uqrjVWrVhmGYRjJycnGzJkz3Y4nJSUZ3//+98/72Q0NDUZAQICxZs2a847z0KFDhiRjz549bvujo6ONP/7xj277Hn30USM5OdkwDMNYtWqV0a9fP6Opqcl1fOXKlee91pfFxMQYy5cv/9rjr7zyihEaGur6+YUXXjAkGUVFRa595eXlhiRj165dhmEYxg9/+ENj0aJFbtdZv369MWDAANfPkoxNmzZ97ecCuDQwpwGXrb/+9a/q3bu3zpw5o7a2Nk2cOFF/+MMfXMdjYmLUv39/188lJSVqbGxUaGio23VOnz6tjz/+WJJUXl6umTNnuh1PTk7Wm2++ed4xlJeXq6WlRbfeeqvH4z569KgqKys1ffp0ZWVlufafOXPGNV+ivLxc3//+99WrVy+3cXjrzTff1KJFi7Rv3z41NDTozJkzam5uVlNTk4KCgiRJvr6+Gj58uOuc6667Tn379lV5ebl+8IMfqKSkRP/4xz/cKgvt7e1qbm7WqVOn3MYI4NJG0oDL1i233KKVK1fKz89PUVFRHSY6nvtSPMfpdGrAgAF66623OlzrQpcd9uzZ0+tznE6npLMtiqSkJLdjPj4+kiSjE95o/+mnn+onP/mJZs6cqUcffVT9+vVTYWGhpk+f7tbGkc4umfyqc/ucTqd++9vf6mc/+1mHmMDAQNPjBNB9kDTgshUUFKTvfe97HsffeOONqqmpka+vrwYNGnTemLi4OBUVFWnq1KmufUVFRV97zWuuuUY9e/bU3/72N919990djvv7+0s6+5f5OREREbriiit08OBB3XHHHee97pAhQ7R+/XqdPn3alZh80zjO57333tOZM2e0bNky9ehxdnrTK6+80iHuzJkzeu+99/SDH/xAkrR//36dOHFC1113naSzv7f9+/d79bsGcGkiaQD+acyYMUpOTtakSZO0ZMkSxcbG6rPPPtPrr7+uSZMmafjw4frP//xP3XXXXRo+fLhuuukmbdiwQXv37tVVV1113msGBgbqgQce0P333y9/f3+lpKTo6NGj2rt3r6ZPn67w8HD17NlT+fn5uvLKKxUYGCi73a758+crOztbwcHBuu2229TS0qL33ntPdXV1uu+++5SZmal58+Zp+vTp+vWvf61PPvlES5cu9ep+r776ap05c0Z/+MMfNH78eL377rt69tlnO8T5+flp9uzZeuqpp+Tn56d77rlHI0eOdCURv/nNb5Senq7o6Gjdfvvt6tGjhz744AN9+OGHWrBggff/QwDotlg9AfyTzWbT66+/rh/96Ef6xS9+oWuvvVZTpkzRJ5984lrtMHnyZP3mN7/RAw88oMTERH366af6j//4j2+87sMPP6ycnBz95je/UVxcnCZPnqza2lpJZ+cLPPXUU1q1apWioqI0ceJESdLdd9+t5557TmvXrlVCQoJGjx6ttWvXupZo9u7dW6+99pr27dunYcOGad68eVqyZIlX9zt06FA98cQTWrJkieLj47VhwwYtXry4Q1yvXr30wAMPKDMzU8nJyerZs6fy8vJcx9PS0vTXv/5V27Zt04gRIzRy5Eg98cQTiomJ8Wo8ALo/m9EZzVEAAHDZo9IAAAA8QtIAAAA8QtIAAAA8QtIAAAA8QtIAAAA8QtIAAAA8QtIAAAA8QtIAAAA8QtIAAAA8QtIAAAA8QtIAAAA8QtIAAAA88v8BRDnXipdmNIsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rotated_data = rotate(img = x0, angle = 90)\n",
    "\n",
    "pred1 = model(x0)\n",
    "pred2 = model(rotated_data)\n",
    "_, arg1 = torch.max(pred1,1)\n",
    "_, arg2 = torch.max(pred2,1)\n",
    "\n",
    "cm = confusion_matrix(arg1.cpu(), arg2.cpu())\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "4ada8008",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\scanu\\AppData\\Local\\Temp\\ipykernel_18000\\2261418131.py:5: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  f.show()\n",
      "C:\\Users\\scanu\\AppData\\Local\\Temp\\ipykernel_18000\\2261418131.py:10: UserWarning: Matplotlib is currently using module://matplotlib_inline.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  g.show()\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(1)\n",
    "# plt.plot(loss_history, label = \"loss\")\n",
    "plt.plot(np.abs(loss_r), label = \"invariance_loss\")\n",
    "plt.legend()\n",
    "f.show()\n",
    "g = plt.figure(2)\n",
    "plt.plot(accuracy, label = \"accuracy\")\n",
    "plt.plot(invariance, label = \"invariance\")\n",
    "plt.legend()\n",
    "g.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b60c68c",
   "metadata": {},
   "source": [
    "Due obiettivi:\n",
    "* siamo entrati nella manifold (nessuno si è accorto di noi)\n",
    "* "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c938c96b",
   "metadata": {},
   "source": [
    "## Root finding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "fc427e1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import optimize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7aa24158",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x2a04574f4f0>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow((x0[0] - rotate(img = x0, angle = 270))[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "cba9f04d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x2a046c03fd0>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow((x0[0] - rotate(img = x0, angle = 45))[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e354e8f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "scipy.linalg.\n",
    "lstsq\n",
    "scipy.linalg.lstsq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9b176aa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kernel della matrice:\n",
      "[-0.89442719  0.4472136 ]\n"
     ]
    }
   ],
   "source": [
    "# Definisci la matrice A\n",
    "A = np.array([[2, 4], [1, 2]])\n",
    "\n",
    "# Calcola il kernel\n",
    "kernel = null_space(A)\n",
    "print(\"Kernel della matrice:\")\n",
    "print(kernel.flatten())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "a5cc46ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "Weights = W(5,rot_mat(28))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "5263d0f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "image1 = model.flatten(x0[0:1]).detach().numpy()[0]\n",
    "image1_rot = model.flatten(rotate(img = x0[0:1], angle = 90)).detach().numpy()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "48acff2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "out1 = Weights@image1\n",
    "out2 = Weights@image1_rot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "068406a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([858675., 844117., 863484., 805784., 751304.])"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "62fdb8a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([858675., 844117., 863484., 805784., 751304.])"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "04198a6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0.])"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out1-out2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "df8de32f",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'mat' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [15]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m x_vec \u001b[38;5;241m=\u001b[39m x\u001b[38;5;241m.\u001b[39mreshape(\u001b[38;5;241m16\u001b[39m)\n\u001b[1;32m----> 2\u001b[0m x_r \u001b[38;5;241m=\u001b[39m \u001b[43mmat\u001b[49m\u001b[38;5;129m@x_vec\u001b[39m\n\u001b[0;32m      3\u001b[0m x_r_img \u001b[38;5;241m=\u001b[39m x_r\u001b[38;5;241m.\u001b[39mreshape(\u001b[38;5;241m4\u001b[39m,\u001b[38;5;241m4\u001b[39m)\n\u001b[0;32m      4\u001b[0m plt\u001b[38;5;241m.\u001b[39mimshow(x_r_img)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'mat' is not defined"
     ]
    }
   ],
   "source": [
    "x_vec = x.reshape(16)\n",
    "x_r = mat@x_vec\n",
    "x_r_img = x_r.reshape(4,4)\n",
    "plt.imshow(x_r_img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f3dcd85",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "157fb4c8",
   "metadata": {},
   "source": [
    "## Train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b2fe8d9",
   "metadata": {},
   "source": [
    "# Standard train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "dd341a61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  0.11\n",
      "Invariance:  0.4\n",
      "Loss:  9.002374\n",
      "Accuracy:  0.1\n",
      "Invariance:  0.16\n",
      "Loss:  4.0445075\n",
      "Accuracy:  0.1\n",
      "Invariance:  0.1\n",
      "Loss:  2.7000878\n",
      "Accuracy:  0.13\n",
      "Invariance:  0.13\n",
      "Loss:  2.363183\n",
      "Accuracy:  0.16\n",
      "Invariance:  0.2\n",
      "Loss:  2.2700348\n",
      "Accuracy:  0.18\n",
      "Invariance:  0.27\n",
      "Loss:  2.2112734\n",
      "Accuracy:  0.2\n",
      "Invariance:  0.34\n",
      "Loss:  2.1408384\n",
      "Accuracy:  0.22\n",
      "Invariance:  0.39\n",
      "Loss:  2.081108\n",
      "Accuracy:  0.24\n",
      "Invariance:  0.39\n",
      "Loss:  2.0376077\n",
      "Accuracy:  0.26\n",
      "Invariance:  0.35\n",
      "Loss:  1.986369\n",
      "Accuracy:  0.29\n",
      "Invariance:  0.3\n",
      "Loss:  1.9362472\n",
      "Accuracy:  0.3\n",
      "Invariance:  0.28\n",
      "Loss:  1.896615\n",
      "Accuracy:  0.31\n",
      "Invariance:  0.29\n",
      "Loss:  1.8545204\n",
      "Accuracy:  0.32\n",
      "Invariance:  0.31\n",
      "Loss:  1.8167752\n",
      "Accuracy:  0.33\n",
      "Invariance:  0.32\n",
      "Loss:  1.7863309\n",
      "Accuracy:  0.34\n",
      "Invariance:  0.32\n",
      "Loss:  1.7606807\n",
      "Accuracy:  0.34\n",
      "Invariance:  0.31\n",
      "Loss:  1.7393464\n",
      "Accuracy:  0.35\n",
      "Invariance:  0.31\n",
      "Loss:  1.7207524\n",
      "Accuracy:  0.36\n",
      "Invariance:  0.3\n",
      "Loss:  1.7038072\n",
      "Accuracy:  0.36\n",
      "Invariance:  0.3\n",
      "Loss:  1.6879773\n",
      "Accuracy:  0.37\n",
      "Invariance:  0.29\n",
      "Loss:  1.6725218\n",
      "Accuracy:  0.38\n",
      "Invariance:  0.28\n",
      "Loss:  1.6566521\n",
      "Accuracy:  0.39\n",
      "Invariance:  0.26\n",
      "Loss:  1.6399888\n",
      "Accuracy:  0.4\n",
      "Invariance:  0.25\n",
      "Loss:  1.6221217\n",
      "Accuracy:  0.42\n",
      "Invariance:  0.24\n",
      "Loss:  1.6027071\n",
      "Accuracy:  0.43\n",
      "Invariance:  0.23\n",
      "Loss:  1.581113\n",
      "Accuracy:  0.44\n",
      "Invariance:  0.22\n",
      "Loss:  1.5576714\n",
      "Accuracy:  0.46\n",
      "Invariance:  0.22\n",
      "Loss:  1.532461\n",
      "Accuracy:  0.47\n",
      "Invariance:  0.21\n",
      "Loss:  1.5069504\n",
      "Accuracy:  0.48\n",
      "Invariance:  0.21\n",
      "Loss:  1.48244\n",
      "Accuracy:  0.49\n",
      "Invariance:  0.21\n",
      "Loss:  1.4592942\n",
      "Accuracy:  0.5\n",
      "Invariance:  0.2\n",
      "Loss:  1.4376168\n",
      "Accuracy:  0.5\n",
      "Invariance:  0.19\n",
      "Loss:  1.4176683\n",
      "Accuracy:  0.51\n",
      "Invariance:  0.19\n",
      "Loss:  1.3990164\n",
      "Accuracy:  0.52\n",
      "Invariance:  0.19\n",
      "Loss:  1.3810391\n",
      "Accuracy:  0.52\n",
      "Invariance:  0.18\n",
      "Loss:  1.3639188\n",
      "Accuracy:  0.53\n",
      "Invariance:  0.18\n",
      "Loss:  1.3477905\n",
      "Accuracy:  0.53\n",
      "Invariance:  0.18\n",
      "Loss:  1.33265\n",
      "Accuracy:  0.54\n",
      "Invariance:  0.18\n",
      "Loss:  1.3184124\n",
      "Accuracy:  0.54\n",
      "Invariance:  0.18\n",
      "Loss:  1.305016\n",
      "Accuracy:  0.54\n",
      "Invariance:  0.18\n",
      "Loss:  1.292463\n",
      "Accuracy:  0.55\n",
      "Invariance:  0.17\n",
      "Loss:  1.2806984\n",
      "Accuracy:  0.55\n",
      "Invariance:  0.17\n",
      "Loss:  1.2696418\n",
      "Accuracy:  0.55\n",
      "Invariance:  0.17\n",
      "Loss:  1.2592676\n",
      "Accuracy:  0.56\n",
      "Invariance:  0.17\n",
      "Loss:  1.2495553\n",
      "Accuracy:  0.56\n",
      "Invariance:  0.17\n",
      "Loss:  1.2404333\n",
      "Accuracy:  0.56\n",
      "Invariance:  0.17\n",
      "Loss:  1.2317642\n",
      "Accuracy:  0.57\n",
      "Invariance:  0.17\n",
      "Loss:  1.2234318\n",
      "Accuracy:  0.57\n",
      "Invariance:  0.17\n",
      "Loss:  1.2154596\n",
      "Accuracy:  0.57\n",
      "Invariance:  0.17\n",
      "Loss:  1.2078689\n",
      "Accuracy:  0.57\n",
      "Invariance:  0.17\n",
      "Loss:  1.2006042\n",
      "Accuracy:  0.57\n",
      "Invariance:  0.17\n",
      "Loss:  1.1936488\n",
      "Accuracy:  0.58\n",
      "Invariance:  0.17\n",
      "Loss:  1.186977\n",
      "Accuracy:  0.58\n",
      "Invariance:  0.16\n",
      "Loss:  1.1805836\n",
      "Accuracy:  0.58\n",
      "Invariance:  0.16\n",
      "Loss:  1.1744756\n",
      "Accuracy:  0.58\n",
      "Invariance:  0.16\n",
      "Loss:  1.1685832\n",
      "Accuracy:  0.58\n",
      "Invariance:  0.16\n",
      "Loss:  1.1629136\n",
      "Accuracy:  0.58\n",
      "Invariance:  0.16\n",
      "Loss:  1.1574578\n",
      "Accuracy:  0.59\n",
      "Invariance:  0.16\n",
      "Loss:  1.1521915\n",
      "Accuracy:  0.59\n",
      "Invariance:  0.16\n",
      "Loss:  1.1471058\n",
      "Accuracy:  0.59\n",
      "Invariance:  0.16\n",
      "Loss:  1.1421976\n",
      "Accuracy:  0.59\n",
      "Invariance:  0.16\n",
      "Loss:  1.1374428\n",
      "Accuracy:  0.59\n",
      "Invariance:  0.16\n",
      "Loss:  1.1328629\n",
      "Accuracy:  0.59\n",
      "Invariance:  0.16\n",
      "Loss:  1.1284448\n",
      "Accuracy:  0.59\n",
      "Invariance:  0.16\n",
      "Loss:  1.1241807\n",
      "Accuracy:  0.6\n",
      "Invariance:  0.16\n",
      "Loss:  1.120044\n",
      "Accuracy:  0.6\n",
      "Invariance:  0.16\n",
      "Loss:  1.1160429\n",
      "Accuracy:  0.6\n",
      "Invariance:  0.16\n",
      "Loss:  1.1121674\n",
      "Accuracy:  0.6\n",
      "Invariance:  0.16\n",
      "Loss:  1.1084082\n",
      "Accuracy:  0.6\n",
      "Invariance:  0.16\n",
      "Loss:  1.1047491\n",
      "Accuracy:  0.6\n",
      "Invariance:  0.16\n",
      "Loss:  1.1011866\n",
      "Accuracy:  0.6\n",
      "Invariance:  0.16\n",
      "Loss:  1.0977288\n",
      "Accuracy:  0.6\n",
      "Invariance:  0.16\n",
      "Loss:  1.0943692\n",
      "Accuracy:  0.6\n",
      "Invariance:  0.16\n",
      "Loss:  1.0911032\n",
      "Accuracy:  0.6\n",
      "Invariance:  0.16\n",
      "Loss:  1.0879244\n",
      "Accuracy:  0.61\n",
      "Invariance:  0.16\n",
      "Loss:  1.0848433\n",
      "Accuracy:  0.61\n",
      "Invariance:  0.16\n",
      "Loss:  1.0818458\n",
      "Accuracy:  0.61\n",
      "Invariance:  0.16\n",
      "Loss:  1.0789365\n",
      "Accuracy:  0.61\n",
      "Invariance:  0.16\n",
      "Loss:  1.0761015\n",
      "Accuracy:  0.61\n",
      "Invariance:  0.16\n",
      "Loss:  1.0733389\n"
     ]
    }
   ],
   "source": [
    "model = InvariantNN()\n",
    "# model.l1.weight.data = torch.Tensor(W(64,rot_mat(28)))\n",
    "optimizer = torch.optim.SGD(model.parameters(), lr=1e-4, momentum=0.9)\n",
    "\n",
    "x0 = torch.Tensor(trainX)\n",
    "y0 = torch.Tensor(trainy)\n",
    "\n",
    "rotated_data = rotate(img = x0, angle = 110)\n",
    "loss_history = []\n",
    "accuracy = []\n",
    "\n",
    "for i in range(400):\n",
    "    l_inv = 0\n",
    "    l_acc = 1\n",
    "    optimizer.zero_grad()\n",
    "    \n",
    "    pred1 = model(x0)\n",
    "    pred2 = model(rotated_data)\n",
    "    avg_pred = torch.sum(pred1, axis = 0)/6000\n",
    "    \n",
    "    _, arg1 = torch.max(pred1,1)\n",
    "    _, arg2 = torch.max(pred2,1)\n",
    "    \n",
    "    \n",
    "    acc = (arg1 == y0.long()).sum().item()/len(x0)\n",
    "    inv = (arg1 == arg2).sum().item()/len(x0)   \n",
    "    \n",
    "    loss = loss_CE(pred1, y0.long()) #- 0.001*loss_CE( avg_pred , uniform_dist )\n",
    "    \n",
    "    \n",
    "    if i%5 == 1:\n",
    "        print(\"Accuracy: \" , round(acc, 2))\n",
    "        print(\"Invariance: \", round(inv, 2))\n",
    "        print(\"Loss: \" , loss.detach().numpy())\n",
    "          \n",
    "    loss_history.append(loss.detach().numpy())\n",
    "    accuracy.append(acc)\n",
    "    \n",
    "    loss.backward()\n",
    "    optimizer.step()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d2a61382",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  0.12263\n",
      "Invariance:  1.0\n",
      "Loss:  5.6825933\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = InvariantNN()\n",
    "model.l1.weight.data = torch.Tensor(W(64,28))\n",
    "\n",
    "x0 = torch.Tensor(trainX)\n",
    "y0 = torch.Tensor(trainy)\n",
    "\n",
    "rotated_data = rotate(img = x0, angle = 270)\n",
    "\n",
    "pred1 = model(x0)\n",
    "pred2 = model(rotated_data)\n",
    "avg_pred = torch.sum(pred1, axis = 0)/6000\n",
    "\n",
    "_, arg1 = torch.max(pred1,1)\n",
    "_, arg2 = torch.max(pred2,1)\n",
    "\n",
    "acc = (arg1 == y0.long()).sum().item()/len(x0)\n",
    "inv = (arg1 == arg2).sum().item()/len(x0) \n",
    "loss = loss_CE(pred1, pred2) + loss_CE(pred1, y0.long()) #- 0.001*loss_CE( avg_pred , uniform_dist )\n",
    "\n",
    "print(\"Accuracy: \" , round(acc, 5))\n",
    "print(\"Invariance: \", round(inv, 9))\n",
    "print(\"Loss: \" , loss.detach().numpy())\n",
    "\n",
    "cm = confusion_matrix(arg1, arg2)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3c2ffb8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4627a21",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "\n",
    "# Definizione di una rete neurale di esempio\n",
    "class SimpleNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(SimpleNN, self).__init__()\n",
    "        self.linear1 = nn.Linear(10, 5)\n",
    "        self.linear2 = nn.Linear(5, 1)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = torch.relu(self.linear1(x))\n",
    "        return self.linear2(x)\n",
    "\n",
    "# Funzione per concatenare i gradienti di tutti i parametri in un unico vettore\n",
    "def get_concatenated_gradients(grad_dict):\n",
    "    return torch.cat([g.flatten() for g in grad_dict.values() if g is not None])\n",
    "\n",
    "# Funzione per ricostruire i gradienti dai vettori concatenati\n",
    "def set_gradients_from_vector(model, grad_vector, grad_dict):\n",
    "    offset = 0\n",
    "    for name, param in model.named_parameters():\n",
    "        if grad_dict[name] is not None:\n",
    "            grad_shape = grad_dict[name].shape\n",
    "            grad_size = grad_dict[name].numel()\n",
    "            param.grad = grad_vector[offset:offset + grad_size].view(grad_shape)\n",
    "            offset += grad_size\n",
    "\n",
    "# Inizializziamo il modello e l'ottimizzatore\n",
    "model = SimpleNN()\n",
    "optimizer = optim.SGD(model.parameters(), lr=0.01)\n",
    "\n",
    "# Creiamo due insiemi di input differenti\n",
    "x1 = torch.randn(3, 10)\n",
    "x2 = torch.randn(3, 10)\n",
    "\n",
    "# Creiamo dei target casuali per calcolare la loss\n",
    "target1 = torch.randn(3, 1)\n",
    "target2 = torch.randn(3, 1)\n",
    "\n",
    "# STEP 1: Calcolo dei gradienti rispetto ai pesi per il primo input `x1`\n",
    "output1 = model(x1)\n",
    "loss1 = nn.functional.mse_loss(output1, target1)\n",
    "optimizer.zero_grad()\n",
    "loss1.backward(retain_graph=True)\n",
    "grads1 = {name: param.grad.clone() for name, param in model.named_parameters()}\n",
    "\n",
    "# STEP 2: Calcolo dei gradienti rispetto ai pesi per il secondo input `x2`\n",
    "output2 = model(x2)\n",
    "loss2 = nn.functional.mse_loss(output2, target2)\n",
    "optimizer.zero_grad()\n",
    "loss2.backward()\n",
    "grads2 = {name: param.grad.clone() for name, param in model.named_parameters()}\n",
    "\n",
    "# Concateniamo i gradienti in un unico vettore\n",
    "grad1_vec = get_concatenated_gradients(grads1)\n",
    "grad2_vec = get_concatenated_gradients(grads2)\n",
    "\n",
    "# STEP 3: Calcolo della componente ortogonale di `grad1_vec` rispetto a `grad2_vec`\n",
    "with torch.no_grad():\n",
    "    dot_product = torch.dot(grad1_vec, grad2_vec)\n",
    "    norm_grad2_sq = torch.norm(grad2_vec) ** 2\n",
    "\n",
    "    # Evitiamo la divisione per zero\n",
    "    if norm_grad2_sq > 0:\n",
    "        # Calcoliamo la proiezione di `grad1_vec` su `grad2_vec`\n",
    "        projection = (dot_product / norm_grad2_sq) * grad2_vec\n",
    "        # Calcoliamo la componente ortogonale\n",
    "        ortho_component = grad1_vec - projection\n",
    "    else:\n",
    "        ortho_component = grad1_vec\n",
    "\n",
    "    # Ricostruiamo i gradienti nel modello usando la componente ortogonale\n",
    "    set_gradients_from_vector(model, ortho_component, grads1)\n",
    "\n",
    "# STEP 4: Eseguiamo l'aggiornamento dei pesi usando la componente ortogonale\n",
    "optimizer.step()\n",
    "\n",
    "# Stampa dei pesi aggiornati (opzionale)\n",
    "print(\"Pesi aggiornati:\")\n",
    "for name, param in model.named_parameters():\n",
    "    print(f\"{name}: {param.data}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
